/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package estacionamiento.vista;

import com.itextpdf.kernel.pdf.PdfWriter;
import com.itextpdf.kernel.pdf.PdfDocument;
import com.itextpdf.layout.Document;
import com.itextpdf.layout.element.Paragraph;
import com.itextpdf.layout.element.Table;
import java.awt.Desktop;

import javax.swing.*;

import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.Date;

import java.util.Properties;
import javax.mail.*;
import javax.mail.internet.*;



/**
 *
 * @author Fernando Cruz
 */
public class TicketsPanel extends javax.swing.JPanel {

    private String placa;
    private String tipoVehiculo;
    private int numeroLugar;
    private Date horaEntrada;
    private long duracion;
    private double tarifa;
    private String modoPago;
    private ByteArrayOutputStream byteArrayOutputStream;
    
    
    public TicketsPanel(String placa, String tipoVehiculo, int numeroLugar, Date horaEntrada, long duracion, double tarifa, String modoPago) {
        initComponents();
        
        this.placa = placa;
        this.tipoVehiculo = tipoVehiculo;
        this.numeroLugar = numeroLugar;
        this.horaEntrada = horaEntrada;
        this.duracion = duracion;
        this.tarifa = tarifa;
        this.modoPago = modoPago;
        
        
        
         generarTicket();
         generarTicketPDF();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnGuardarPDF = new javax.swing.JButton();
        btnImprimir = new javax.swing.JButton();
        btnEnviarCorreo = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        textArea = new javax.swing.JTextArea();

        setToolTipText("Generar Ticket");

        btnGuardarPDF.setText("Guardar PDF");
        btnGuardarPDF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuardarPDFActionPerformed(evt);
            }
        });

        btnImprimir.setText("Imprimir");
        btnImprimir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnImprimirActionPerformed(evt);
            }
        });

        btnEnviarCorreo.setText("Enviar Correo");
        btnEnviarCorreo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEnviarCorreoActionPerformed(evt);
            }
        });

        textArea.setColumns(20);
        textArea.setRows(5);
        jScrollPane1.setViewportView(textArea);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(74, Short.MAX_VALUE)
                .addComponent(btnImprimir)
                .addGap(18, 18, 18)
                .addComponent(btnEnviarCorreo)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnGuardarPDF, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(66, 66, 66))
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 406, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 395, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnImprimir)
                    .addComponent(btnEnviarCorreo)
                    .addComponent(btnGuardarPDF))
                .addContainerGap(22, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnImprimirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnImprimirActionPerformed
        imprimirTicket();
    }//GEN-LAST:event_btnImprimirActionPerformed

    private void btnGuardarPDFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuardarPDFActionPerformed
        guardarTicketAutomaticamente();
    }//GEN-LAST:event_btnGuardarPDFActionPerformed

    private void btnEnviarCorreoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEnviarCorreoActionPerformed
        String destinatario = JOptionPane.showInputDialog(this, "Introduce la dirección de correo electrónico del destinatario:");
        if (destinatario != null && !destinatario.isEmpty()) {
            enviarCorreo(destinatario);
        }
    }//GEN-LAST:event_btnEnviarCorreoActionPerformed

    private double calcularTarifa(long duracion) {
        long minutos = duracion / 1000 / 60;
        long horas = minutos / 60;
        minutos = minutos % 60;

        double tarifaPorHora = 10.0;
        double tarifaTotal = horas * tarifaPorHora;

        if (minutos > 30) {
            tarifaTotal += tarifaPorHora;
        } else if (minutos > 0) {
            tarifaTotal += tarifaPorHora / 2;
        }

        return tarifaTotal;
    }
    
    private void generarTicket() {
        String ticketContent = String.format(
            "──────────────────────────────────────────────\n" +
            "                Ticket de Estacionamiento\n" +
            "──────────────────────────────────────────────\n" +
            "Nombre del Estacionamiento: Estacionamiento XYZ\n" +
            "Fecha y Hora: %s\n" +
            "──────────────────────────────────────────────\n" +
            "Número de Placa: %s\n" +
            "──────────────────────────────────────────────\n" +
            "Tipo de Vehículo: %s\n" +
            "──────────────────────────────────────────────\n" +
            "Número de Lugar: %d\n" +
            "──────────────────────────────────────────────\n" +
            "Hora de Entrada: %s\n" +
            "──────────────────────────────────────────────\n" +
            "Tiempo Transcurrido: %s\n" +
            "──────────────────────────────────────────────\n" +
            "Tarifa por Hora: $10.00\n" +
            "──────────────────────────────────────────────\n" +
            "Costo Total: $%.2f\n" +
            "──────────────────────────────────────────────\n" +
            "Modo de Pago: %s\n" +
            "──────────────────────────────────────────────\n" +
            "¡Gracias por su visita!\n" +
            "Que tenga un buen día\n" +
            "──────────────────────────────────────────────",
            new SimpleDateFormat("yyyy-MM-dd HH:mm").format(new Date()), 
            placa, tipoVehiculo, numeroLugar, 
            new SimpleDateFormat("yyyy-MM-dd HH:mm").format(horaEntrada), 
            formatoHora(duracion), tarifa, modoPago
        );
        textArea.setText(ticketContent);
    }

    private void generarTicketPDF() {
        byteArrayOutputStream = new ByteArrayOutputStream();
        try {
            PdfWriter writer = new PdfWriter(byteArrayOutputStream);
            PdfDocument pdf = new PdfDocument(writer);
            Document document = new Document(pdf);

            SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm");
            String fechaHora = dateFormat.format(new Date());
            String horaEntradaStr = dateFormat.format(horaEntrada);
            String duracionStr = formatoHora(duracion);

            document.add(new Paragraph("Ticket de Estacionamiento").setBold().setFontSize(18));
            document.add(new Paragraph("Nombre del Estacionamiento: Estacionamiento XYZ"));
            document.add(new Paragraph("Fecha y Hora: " + fechaHora));
            document.add(new Paragraph(" "));

            Table table = new Table(2);
            table.addCell("Número de Placa:");
            table.addCell(placa);
            table.addCell("Tipo de Vehículo:");
            table.addCell(tipoVehiculo);
            table.addCell("Número de Lugar:");
            table.addCell(String.valueOf(numeroLugar));
            table.addCell("Hora de Entrada:");
            table.addCell(horaEntradaStr);
            table.addCell("Tiempo Transcurrido:");
            table.addCell(duracionStr);
            table.addCell("Tarifa por Hora:");
            table.addCell("$10.00");
            table.addCell("Costo Total:");
            table.addCell("$" + tarifa);
            table.addCell("Modo de Pago:");
            table.addCell(modoPago);

            document.add(table);
            document.add(new Paragraph(" "));
            document.add(new Paragraph("Gracias por utilizar nuestros servicios!"));

            document.close();
            writer.close();


        } catch (IOException e) {
            e.printStackTrace();
        }
    }


    private int getTicketNumber() {
        int ticketNumber = 1;
        File dir = new File("C:\\Users\\Fercr\\Documents\\TKEstacionamiento");
        if (!dir.exists()) {
            dir.mkdirs();
        } else {
            File[] files = dir.listFiles((d, name) -> name.startsWith("EstacionamientoTicket_") && name.endsWith(".pdf"));
            if (files != null) {
                ticketNumber = files.length + 1;
            }
        }
        return ticketNumber;
    }

    private void guardarTicketAutomaticamente() {
        try {
            int ticketNumber = getTicketNumber();
            String filePath = "C:\\Users\\Fercr\\Documents\\TKEstacionamiento\\EstacionamientoTicket_" + String.format("%02d", ticketNumber) + ".pdf";
            try (FileOutputStream fos = new FileOutputStream(filePath)) {
                byteArrayOutputStream.writeTo(fos);
            }

            JOptionPane.showMessageDialog(this, "PDF guardado exitosamente en: " + filePath);

            // Mostrar la carpeta donde se guardó el archivo
            Desktop.getDesktop().open(new File("C:\\Users\\Fercr\\Documents\\TKEstacionamiento"));
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private void imprimirTicket() {
        try {
            File tempFile = File.createTempFile("ticket_", ".pdf");
            try (FileOutputStream fos = new FileOutputStream(tempFile)) {
                byteArrayOutputStream.writeTo(fos);
            }
            byteArrayOutputStream.flush();

            if (Desktop.isDesktopSupported()) {
                Desktop desktop = Desktop.getDesktop();
                if (desktop.isSupported(Desktop.Action.PRINT)) {
                    desktop.print(tempFile);
                } else {
                    JOptionPane.showMessageDialog(this, "La acción de impresión no es soportada en este sistema.");
                }
            } else {
                JOptionPane.showMessageDialog(this, "El sistema no soporta acciones de escritorio.");
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private String formatoHora(long duracionMilis) {
        long segundos = duracionMilis / 1000;
        long minutos = segundos / 60;
        long horas = minutos / 60;
        long dias = horas / 24;

        segundos = segundos % 60;
        minutos = minutos % 60;
        horas = horas % 24;

        return String.format("%d días, %02d:%02d:%02d", dias, horas, minutos, segundos);
    }

    private void enviarCorreo(String correoDestinatario) {
        String correoenvia = "raphtiparking@gmail.com";
        String contrasenia = "AOMXYESWXCDXOMZB";
        String mensaje = "Adjunto encontrará su ticket de estacionamiento.";

        Properties props = new Properties();
        props.put("mail.smtp.host", "smtp.gmail.com");
        props.put("mail.smtp.starttls.enable", "true");
        props.put("mail.smtp.port", "587");
        props.put("mail.smtp.user", correoenvia);
        props.put("mail.smtp.auth", "true");

        Session session = Session.getInstance(props, new javax.mail.Authenticator() {
            protected PasswordAuthentication getPasswordAuthentication() {
                return new PasswordAuthentication(correoenvia, contrasenia);
            }
        });

        try {
            MimeMessage message = new MimeMessage(session);
            message.setFrom(new InternetAddress(correoenvia));
            message.addRecipient(Message.RecipientType.TO, new InternetAddress(correoDestinatario));
            message.setSubject("Ticket de Estacionamiento");
            message.setText(mensaje);

            // Adjuntar PDF
            MimeBodyPart messageBodyPart = new MimeBodyPart();
            messageBodyPart.setText(mensaje);

            Multipart multipart = new MimeMultipart();
            multipart.addBodyPart(messageBodyPart);

            // Parte del archivo adjunto
            MimeBodyPart attachPart = new MimeBodyPart();
            String filePath = "C:\\Users\\Fercr\\Documents\\TKEstacionamiento\\EstacionamientoTicket_" + String.format("%02d", getTicketNumber() - 1) + ".pdf";
            attachPart.attachFile(filePath);
            multipart.addBodyPart(attachPart);

            message.setContent(multipart);

            Transport.send(message);

            JOptionPane.showMessageDialog(this, "Correo enviado correctamente.");
        } catch (MessagingException | IOException e) {
            JOptionPane.showMessageDialog(this, "Error al enviar el correo: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        }
    }

    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnEnviarCorreo;
    private javax.swing.JButton btnGuardarPDF;
    private javax.swing.JButton btnImprimir;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea textArea;
    // End of variables declaration//GEN-END:variables
}
